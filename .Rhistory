# For Opponent, add "Opp_" prefix to columns
opponent_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Opponent" = "Team")) |>
rename_with(~ paste("Opp_", ., sep = ""), -c(gameID, Opponent))
# Extract stats for Team and Opponent
# For Team
team_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Team" = "Team"))
# For Opponent, add "Opp_" prefix to columns
opponent_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Opponent" = "Team")) |>
rename_with(~ paste("Opp_", ., sep = ""))
# Combine both datasets
final_data <- bind_rows(team_data, opponent_data)
# Print the final result
print(final_data)
# Extract stats for Team and Opponent
# For Team
team_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Team" = "Team"))
# For Opponent, add "Opp_" prefix to columns
opponent_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Opponent" = "Team")) |>
rename_with(~ paste("Opp_", ., sep = ""), -c(game_id, Opponent))
# Extract stats for Team and Opponent
# For Team
team_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Team" = "Team"))
# For Opponent, add "Opp_" prefix to columns
opponent_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Opponent" = "Team")) |>
rename_with(~ paste("Opp_", ., sep = ""), -c(Opponent))
# Combine both datasets
final_data <- bind_rows(team_data, opponent_data)
# Print the final result
print(final_data)
# Extract stats for Team and Opponent
# For Team
team_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Team" = "Team"))
# For Opponent, add "Opp_" prefix to columns
opponent_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Opponent" = "Team"))
print(opponent_data)
# Combine both datasets
final_data <- bind_rows(team_data, opponent_data)
# Print the final result
print(final_data)
# Extract stats for Team and Opponent
# For Team
team_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Team" = "Team"))
# For Opponent, add "Opp_" prefix to columns
opponent_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Opponent" = "Team"))
rename_with(~ paste("Opp_", ., sep = ""))
# Extract stats for Team and Opponent
# For Team
team_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Team" = "Team"))
# For Opponent, add "Opp_" prefix to columns
opponent_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Opponent" = "Team")) |>
rename_with(~ paste("Opp_", ., sep = ""))
print(opponent_data)
# Combine both datasets
final_data <- bind_rows(team_data, opponent_data)
# Print the final result
print(final_data)
# Extract stats for Team and Opponent
# For Team
team_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Team" = "Team"))
# For Opponent, add "Opp_" prefix to columns
opponent_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Opponent" = "Team")) |>
rename_with(~ paste("Opp_", ., sep = ""), -c(Opp_Team, Opp_Opponent, Opp_Location))
# Extract stats for Team and Opponent
# For Team
team_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Team" = "Team"))
# For Opponent, add "Opp_" prefix to columns
opponent_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Opponent" = "Team")) |>
rename_with(~ paste("Opp_", ., sep = ""), -c(Opp_Opponent, Opp_Location))
# Extract stats for Team and Opponent
# For Team
team_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Team" = "Team"))
# For Opponent, add "Opp_" prefix to columns
opponent_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Opponent" = "Team")) |>
rename_with(~ paste("Opp_", ., sep = ""))
#-c(Opp_Team, Opp_Opponent, Opp_Location))
print(opponent_data)
# Combine both datasets
final_data <- bind_rows(team_data, opponent_data)
# Print the final result
print(final_data)
# Extract stats for Team and Opponent
# For Team
team_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Team" = "Team"))
# For Opponent, add "Opp_" prefix to columns
opponent_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Opponent" = "Team")) |>
rename_with(~ paste("Opp_", ., sep = ""), -c(Opp_Team, Opp_Opponent, Opp_Location))
# Extract stats for Team and Opponent
# For Team
team_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Team" = "Team"))
opponent_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Opponent" = "Team")) |>
rename_with(~ paste("Opp_", ., sep = ""), -c(Opp_Team, Opp_Opponent, Opp_Location))
# Extract stats for Team and Opponent
# For Team
team_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Team" = "Team"))
opponent_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Opponent" = "Team")) |>
rename_with(~ paste("Opp_", ., sep = ""))
print(opponent_data)
# Combine both datasets
final_data <- bind_rows(team_data, opponent_data)
# Print the final result
print(final_data)
# Extract stats for Team and Opponent
# For Team
team_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Team" = "Team"))
opponent_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Opponent" = "Team")) |>
rename_with(~ paste("Opp_", ., sep = ""))
# Remove unwanted columns
opponent_data <- opponent_data |>
select(-c("Opp_date", "Opp_Team", "Opp_Opponent", "Opp_Location"))
print(opponent_data)
# Combine both datasets
final_data <- bind_rows(team_data, opponent_data)
# Print the final result
print(final_data)
# Extract stats for Team and Opponent
# For Team
team_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Team" = "Team"))
opponent_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Opponent" = "Team")) |>
rename_with(~ paste("Opp_", ., sep = ""))
# Remove unwanted columns
opponent_data <- opponent_data |>
select(-c("Opp_date", "Opp_Team","Opp_Location"))
print(opponent_data)
# Combine both datasets
final_data <- bind_rows(team_data, opponent_data)
# Print the final result
print(final_data)
# Extract stats for Team and Opponent
# For Team
team_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Team" = "Team"))
opponent_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Opponent" = "Team")) |>
rename_with(~ paste("Opp_", ., sep = ""))
# Remove unwanted columns
opponent_data <- opponent_data |>
rename(Opp_Team = Opponent) |>
select(-c("Opp_date", "Opp_Team","Opp_Location"))
# Extract stats for Team and Opponent
# For Team
team_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Team" = "Team"))
opponent_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Opponent" = "Team")) |>
rename_with(~ paste("Opp_", ., sep = ""))
# Remove unwanted columns
opponent_data <- opponent_data |>
rename(Opp_Opponent = Opponent) |>
select(-c("Opp_date", "Opp_Team","Opp_Location"))
# Extract stats for Team and Opponent
# For Team
team_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Team" = "Team"))
opponent_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Opponent" = "Team")) |>
rename_with(~ paste("Opp_", ., sep = ""))
# Remove unwanted columns
opponent_data <- opponent_data |>
rename(Opponent = Opp_Opponent) |>
select(-c("Opp_date", "Opp_Team","Opp_Location"))
print(opponent_data)
# Combine both datasets
final_data <- bind_rows(team_data, opponent_data)
# Print the final result
print(final_data)
# Extract stats for Team and Opponent
# For Team
team_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Team" = "Team"))
opponent_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Opponent" = "Team")) |>
rename_with(~ paste("Opp_", ., sep = ""))
# Remove unwanted columns
opponent_data <- opponent_data |>
rename(Opponent = Opp_Opponent,
Team = Opp_Team) |>
select(-c("Opp_date","Opp_Location"))
print(opponent_data)
# Combine both datasets
final_data <- bind_rows(team_data, opponent_data)
# Print the final result
print(final_data)
# Extract stats for Team and Opponent
# For Team
team_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Team" = "Team"))
opponent_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Opponent" = "Team")) |>
rename_with(~ paste("Opp_", ., sep = ""))
# Remove unwanted columns
opponent_data <- opponent_data |>
rename(Opponent = Opp_Opponent,
Team = Opp_Team) |>
select(-c("Opp_date","Opp_Location"))
print(opponent_data)
# Combine both datasets
final_data <- team_data |>
left_join(opponent_data, by = c("Team", "Opponent"))
# Print the final result
print(final_data)
library(dplyr)
current_date <- as.Date("2024-12-28")
file_to_write <- "test_file_28th.csv"
cbbdata::cbd_login(username = "Naki", password = "Duke@123")
data <- cbbdata::cbd_torvik_team_factors(year = 2025, no_bias = TRUE)
print(data)
# Filter teams in ACC and B10 and extract into separate lists
acc_teams <- data |>
filter(conf == "ACC") |>
pull(team) # Extract the 'team' column as a list
b10_teams <- data |>
filter(conf == "B10") |>
pull(team) # Extract the 'team' column as a list
b12_teams <- data |>
filter(conf == "B12") |>
pull(team) # Extract the 'team' column as a list
espn_top25_week8 <- c(
"Tennessee", "Auburn", "Iowa St.", "Duke", "Alabama", "Florida",
"Kansas", "Marquette", "Oregon", "Kentucky", "Connecticut", "Oklahoma",
"Texas A&M", "Gonzaga", "Houston", "Mississippi", "Cincinnati",
"Michigan St.", "Mississippi St.", "San Diego St.",
"Purdue", "UCLA", "Arkansas", "Illinois", "Baylor"
)
extra_games <- c("Colorado St.", "Georgia St.", "North Carolina Central",
"Iowa St.", "Richmond", "Boise St.", "Nevada", "Eastern Kentucky")
unique_teams <- unique(c(acc_teams, b10_teams, b12_teams, espn_top25_week8, extra_games))
print(acc_teams)
print(b10_teams)
print(b12_teams)
print(espn_top25_week8)
print(unique_teams)
selected_data_columns <- data |>
dplyr::select(Team = team,
ADJO = adj_o,
ADJD = adj_d,
EFG_pct = efg,
TO_Pct = tov_rate,
OR_Pct = oreb_rate,
FTR_Pct = ftr,
ThreePointer_Pct = three_pt_pct)
print(selected_data_columns)
all_games <- cbbdata::cbd_torvik_season_schedule(year = 2025)
all_games <- all_games |>
mutate(Location = ifelse(neutral, "N", "H")) |>
select(-neutral, -type, -year, -game_id) |>
rename(Team = home,
Opponent = away,
)
upcoming_games <- all_games |>
filter(date == current_date)
print(upcoming_games)
required_upcoming_games <- upcoming_games |>
filter(Team %in% unique_teams | Opponent %in% unique_teams)
print(required_upcoming_games)
# Extract stats for Team and Opponent
team_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Team" = "Team"))
opponent_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Opponent" = "Team")) |>
rename_with(~ paste("Opp_", ., sep = ""))
# Remove unwanted columns
opponent_data <- opponent_data |>
rename(Opponent = Opp_Opponent,
Team = Opp_Team) |>
select(-c("Opp_date","Opp_Location"))
# Combine both datasets
final_data <- team_data |>
left_join(opponent_data, by = c("Team", "Opponent"))
# Print the final result
print(final_data)
write.csv(final_data, file_to_write, row.names = FALSE)
library(dplyr)
current_date <- as.Date("2024-12-29")
file_to_write <- "test_file_29th.csv"
cbbdata::cbd_login(username = "Naki", password = "Duke@123")
data <- cbbdata::cbd_torvik_team_factors(year = 2025, no_bias = TRUE)
print(data)
# Filter teams in ACC and B10 and extract into separate lists
acc_teams <- data |>
filter(conf == "ACC") |>
pull(team) # Extract the 'team' column as a list
b10_teams <- data |>
filter(conf == "B10") |>
pull(team) # Extract the 'team' column as a list
b12_teams <- data |>
filter(conf == "B12") |>
pull(team) # Extract the 'team' column as a list
espn_top25_week8 <- c(
"Tennessee", "Auburn", "Iowa St.", "Duke", "Alabama", "Florida",
"Kansas", "Marquette", "Oregon", "Kentucky", "Connecticut", "Oklahoma",
"Texas A&M", "Gonzaga", "Houston", "Mississippi", "Cincinnati",
"Michigan St.", "Mississippi St.", "San Diego St.",
"Purdue", "UCLA", "Arkansas", "Illinois", "Baylor"
)
extra_games <- c("Colorado St.", "Georgia St.", "North Carolina Central",
"Iowa St.", "Richmond", "Boise St.", "Nevada", "Eastern Kentucky")
unique_teams <- unique(c(acc_teams, b10_teams, b12_teams, espn_top25_week8, extra_games))
print(acc_teams)
print(b10_teams)
print(b12_teams)
print(espn_top25_week8)
print(unique_teams)
selected_data_columns <- data |>
dplyr::select(Team = team,
ADJO = adj_o,
ADJD = adj_d,
EFG_pct = efg,
TO_Pct = tov_rate,
OR_Pct = oreb_rate,
FTR_Pct = ftr,
ThreePointer_Pct = three_pt_pct)
print(selected_data_columns)
all_games <- cbbdata::cbd_torvik_season_schedule(year = 2025)
all_games <- all_games |>
mutate(Location = ifelse(neutral, "N", "H")) |>
select(-neutral, -type, -year, -game_id) |>
rename(Team = home,
Opponent = away,
)
upcoming_games <- all_games |>
filter(date == current_date)
print(upcoming_games)
required_upcoming_games <- upcoming_games |>
filter(Team %in% unique_teams | Opponent %in% unique_teams)
print(required_upcoming_games)
# Extract stats for Team and Opponent
team_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Team" = "Team"))
opponent_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Opponent" = "Team")) |>
rename_with(~ paste("Opp_", ., sep = ""))
# Remove unwanted columns
opponent_data <- opponent_data |>
rename(Opponent = Opp_Opponent,
Team = Opp_Team) |>
select(-c("Opp_date","Opp_Location"))
# Combine both datasets
final_data <- team_data |>
left_join(opponent_data, by = c("Team", "Opponent"))
# Print the final result
print(final_data)
write.csv(final_data, file_to_write, row.names = FALSE)
library(dplyr)
current_date <- as.Date("2024-12-29")
file_to_write <- "test_file_29th.csv"
cbbdata::cbd_login(username = "Naki", password = "Duke@123")
data <- cbbdata::cbd_torvik_team_factors(year = 2025, no_bias = TRUE)
print(data)
# Filter teams in ACC and B10 and extract into separate lists
acc_teams <- data |>
filter(conf == "ACC") |>
pull(team) # Extract the 'team' column as a list
b10_teams <- data |>
filter(conf == "B10") |>
pull(team) # Extract the 'team' column as a list
b12_teams <- data |>
filter(conf == "B12") |>
pull(team) # Extract the 'team' column as a list
espn_top25_week8 <- c(
"Tennessee", "Auburn", "Iowa St.", "Duke", "Alabama", "Florida",
"Kansas", "Marquette", "Oregon", "Kentucky", "Connecticut", "Oklahoma",
"Texas A&M", "Gonzaga", "Houston", "Mississippi", "Cincinnati",
"Michigan St.", "Mississippi St.", "San Diego St.",
"Purdue", "UCLA", "Arkansas", "Illinois", "Baylor"
)
extra_games <- c("Colorado St.", "Georgia St.", "North Carolina Central",
"Iowa St.", "Richmond", "Boise St.", "Nevada", "Eastern Kentucky",
"Iona", "Texas St.", "Army", "Northeastern", "Northwestern")
unique_teams <- unique(c(acc_teams, b10_teams, b12_teams, espn_top25_week8, extra_games))
print(acc_teams)
print(b10_teams)
print(b12_teams)
print(espn_top25_week8)
print(unique_teams)
selected_data_columns <- data |>
dplyr::select(Team = team,
ADJO = adj_o,
ADJD = adj_d,
EFG_pct = efg,
TO_Pct = tov_rate,
OR_Pct = oreb_rate,
FTR_Pct = ftr,
ThreePointer_Pct = three_pt_pct)
print(selected_data_columns)
all_games <- cbbdata::cbd_torvik_season_schedule(year = 2025)
all_games <- all_games |>
mutate(Location = ifelse(neutral, "N", "H")) |>
select(-neutral, -type, -year, -game_id) |>
rename(Team = home,
Opponent = away,
)
upcoming_games <- all_games |>
filter(date == current_date)
print(upcoming_games)
required_upcoming_games <- upcoming_games |>
filter(Team %in% unique_teams | Opponent %in% unique_teams)
print(required_upcoming_games)
# Extract stats for Team and Opponent
team_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Team" = "Team"))
opponent_data <- required_upcoming_games |>
left_join(selected_data_columns, by = c("Opponent" = "Team")) |>
rename_with(~ paste("Opp_", ., sep = ""))
# Remove unwanted columns
opponent_data <- opponent_data |>
rename(Opponent = Opp_Opponent,
Team = Opp_Team) |>
select(-c("Opp_date","Opp_Location"))
# Combine both datasets
final_data <- team_data |>
left_join(opponent_data, by = c("Team", "Opponent"))
# Print the final result
print(final_data)
write.csv(final_data, file_to_write, row.names = FALSE)
library(dplyr)
cbbdata::cbd_login(username = "Naki", password = "Duke@123")
data <- cbbdata::cbd_torvik_game_stats(year = 2025)
all_teams <- unique(data$team) # There are 364 teams in total
total_na <- colSums(is.na(data))
current_date <- as.Date("2024-12-27")
filtered_data <- data |>
filter(date != current_date)
train_data <- filtered_data |>
group_by(game_id, date) |>
summarize(
Team = first(team),
Opponent = last(team),
Team_Score = first(pts_scored),
Opponent_Score = first(pts_allowed),
Location = first(location),
ADJO = first(adj_o),
ADJD = first(adj_d),
EFF = first(off_ppp),
EFG_pct = first(off_efg),
TO_Pct = first(off_to),
OR_Pct = first(off_or),
FTR_Pct = first(off_ftr),
ThreePointer_Pct = round((first(tp_pct*100)), 2),
opp_ADJO = last(adj_o),
opp_ADJD = last(adj_d),
Opp_EFF = last(off_ppp),
Opp_EFG_Pct = last(off_efg),
Opp_TO_Pct = last(off_to),
Opp_OR_Pct = last(off_or),
Opp_FTR_Pct = last(off_ftr),
Opp_ThreePointer_Pct = round((last(tp_pct*100)), 2),
.groups = "drop" # Remove grouping
)
train_data$Location[is.na(train_data$Location)] <- "N"
date_required <- data |>
filter(date == current_date)
# Combine rows for each game
test_data <- date_required |>
group_by(game_id, date) |>
summarize(
Team = first(team),
Opponent = last(team),
Team_Score = first(pts_scored),
Opponent_Score = first(pts_allowed),
Location = first(location),
ADJO = first(adj_o),
ADJD = first(adj_d),
EFF = first(off_ppp),
EFG_pct = first(off_efg),
TO_Pct = first(off_to),
OR_Pct = first(off_or),
FTR_Pct = first(off_ftr),
ThreePointer_Pct = round((first(tp_pct*100)), 2),
opp_ADJO = last(adj_o),
opp_ADJD = last(adj_d),
Opp_EFF = last(off_ppp),
Opp_EFG_Pct = last(off_efg),
Opp_TO_Pct = last(off_to),
Opp_OR_Pct = last(off_or),
Opp_FTR_Pct = last(off_ftr),
Opp_ThreePointer_Pct = round((last(tp_pct*100)), 2),
.groups = "drop" # Remove grouping
)
test_data$Location[is.na(test_data$Location)] <- "N"
train_file <- "train_data.csv"
test_file <- "test_data.csv"
write.csv(train_data, train_file, row.names = FALSE)
write.csv(test_data, test_file, row.names = FALSE)
